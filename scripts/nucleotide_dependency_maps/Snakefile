configfile: "config.yaml"


assert config["START_POSITION"] < config["END_POSITION"]
assert (config["END_POSITION"] - config["START_POSITION"]) - config[
    "DISPLAY_MAP_START_RELATIVE"
] + config["DISPLAY_MAP_END_RELATIVE"] + 1 > 0


rule all:
    input:
        expand(
            "output/display_dependency_map/{model}/{sequence}/{chromosome}/seq_{seq_start}-{seq_end}/dp_{map_start}-{map_end}.png",
            model=config["MODELS"],
            sequence=config["SEQUENCES"],
            chromosome=config["CHROMOSOME"],
            seq_start=config["START_POSITION"],
            seq_end=config["END_POSITION"],
            map_start=config["DISPLAY_MAP_START_RELATIVE"],
            map_end=config["DISPLAY_MAP_END_RELATIVE"],
        ),


rule download_fasta:
    output:
        "output/download_fasta/{sequence}.fna",
    params:
        id=lambda wildcards: wildcards.sequence,
        db="nuccore",
        format="fasta",
    wrapper:
        "v5.8.2/bio/entrez/efetch"


rule compute_dependency_map:
    input:
        "output/download_fasta/{sequence}.fna",
    params:
        model=lambda wildcards: wildcards.model,
    output:
        "output/compute_dependency_map/{model}/{sequence}/{chromosome}/seq_{seq_start}-{seq_end}.parquet",
    script:
        "scripts/compute_dependency_map.py"


rule display_dependency_map:
    input:
        "output/download_fasta/{sequence}.fna",
        "output/compute_dependency_map/{model}/{sequence}/{chromosome}/seq_{seq_start}-{seq_end}.parquet",
    output:
        "output/display_dependency_map/{model}/{sequence}/{chromosome}/seq_{seq_start}-{seq_end}/dp_{map_start}-{map_end}.{format}",
    script:
        "scripts/display_dependency_map.py"
